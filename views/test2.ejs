<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>testing funtionalities by example</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous">
  <link href='http://fonts.googleapis.com/css?family=Poiret+One' rel='stylesheet' type='text/css'>
  <style>
  body {
    color: #333;
  }

  #hero-image {
    height: 550px;
    width: 100%;
    background-color: #444;
    background-image: url("https://apod.nasa.gov/apod/image/1807/Raquarii_HubbleSchmidt_3116.jpg");
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
    position: relative;
  }
  #chart {
    position: fixed;
    left: 20px;
    right: 20px;
    top: 20px;
    bottom: 20px;
  }
</style>
<script src="bower_components/jquery/dist/jquery.min.js"></script>

<script src="bower_components/async/dist/async.min.js"></script>
</head>
<body>   



  <script>

    console.log("hello");
    let jsonArr = [];
    let trialBalance = [];


    let jsonarr = ["ledger.json","trialBalance.json"];
    async.map(jsonarr,function(json,callback) {
      $.getJSON(json,function(result) {
        callback(null,result)
      })        
      },
      function(err,result) {
        if (err) {
          console.log(err)
        }
        jsonArr = result[0];
        trialBalance = result[1];
        console.log("arg1: ", jsonArr)
        console.log("arg2: ", trialBalance);

/*        

        jsonArr.sort(function(a,b) {
          let aPro = a["acctno"] + a["date"];
          let bPro = b["acctno"] + b["date"];
          return ((aPro < bPro) ? -1 : ((aPro > bPro) ? 1 : 0));
        });

        let acctObj = jsonArr.reduce(function(acctobj,obj) {
         acctobj[obj.acctno] = acctobj[obj.acctno] || [];
         acctobj[obj.acctno].push(
           {acctname: obj.acctname,dr:obj.dr,cr:obj.cr,date:obj.date}
           )
         return acctobj; 
       }, {});

        let  totalAcctArr = [];
        for (let i in acctObj) {
          let drttl = 0;
          let crttl = 0;
          let printorder = i.substr(0,2);
          let acctclass = "";
          if (acctclassref[i]) {
            actclass = acctclassref[i];
          }
          else {
            acctclass = "";
          }

          let tempobj = {};

          tempobj.acctname = acctObj[i][0].acctname;

          acctObj[i].forEach(function(arr,index) {
            if (acctObj[i][index].dr) {
              drttl = drttl + acctObj[i][index].dr;
            }
            if (acctObj[i][index].cr) {
              crttl = crttl + acctObj[i][index].cr;
            }  
            let diff = drttl - crttl;
            let drbal = 0;
            let crbal = 0;
            if (diff > 0) { 
              drbal = diff;
            }
            if (diff < 0) { 
              crbal = Math.abs(diff);
            }
            tempobj.drttl = drbal;
            tempobj.crttl = crbal;        
            tempobj.actclass = actclass;
            tempobj.printorder = printorder;
          })

          totalAcctArr.push(tempobj);

        }
        console.log("totalAcctArr: ", totalAcctArr)

        */

      })


              
      /*
      let json = JSON.stringify(totalAcctArr);
      fs.writeFile('trialBalance.json', json, 'utf8', function(err) { 
        if (err) {
          console.log("write trialBalance.json error!")
        }
        else{
          console.log("write trialBalance.json success!")
        }
      })
      */




      /*
      var chartDiv = document.getElementById("chart");
      var svg = d3.select(chartDiv).append("svg");

      function redraw(){

        // Extract the width and height that was computed by CSS.
        var width = chartDiv.clientWidth;
        var height = chartDiv.clientHeight;

        // Use the extracted size to set the size of an SVG element.
        svg
          .attr("width", width)
          .attr("height", height);

        // Draw an X to show that the size is correct.
        var lines = svg.selectAll("line").data([
          {x1: 0, y1: 0, x2: width, y2: height},
          {x1: 0, y1: height, x2: width, y2: 0}
        ]);
        lines
          .enter().append("line")
            .style("stroke-width", 50)
            .style("stroke-opacity", 0.4)
            .style("stroke", "black")
          .merge(lines)
            .attr("x1", function (d) { return d.x1; })
            .attr("y1", function (d) { return d.y1; })
            .attr("x2", function (d) { return d.x2; })
            .attr("y2", function (d) { return d.y2; })
         ;
      }

      // Draw for the first time to initialize.
      redraw();

      // Redraw based on the new size whenever the browser window is resized.
      window.addEventListener("resize", redraw);

      */
 /*       
http://1000hz.github.io/bootstrap-validator/


    function getArrOfRandomArr(arrlength,max,totalarr) {
       var arrOfRandomArr = [];
       while(arrOfRandomArr.length !== totalarr) {
        var randomArr = [];
        while(randomArr.length !== arrlength) {
          var n = Math.floor(Math.random()*max);
          if (n > 0) {
            if (n < 10) {
              n = "0" + n;
            } else {
              n = String(n);
            }
            if (randomArr.indexOf(n) == -1) {
              randomArr.push(n);
            }
          }
        }
        randomArr.sort(function(a,b) { return a - b })
        arrOfRandomArr.push(randomArr)
      }
      return arrOfRandomArr;
    }

       //reduce arrofarr to an array of loto number       
       let resultobj = ((arrleng,max,totalarr,numarr) => {
            let arrofarr = getArrOfRandomArr(arrleng,max,totalarr);           
            numarr = arrofarr.reduce((lotoarr,lotonum) => {
              let obj = {};
              obj['lotonum'] = lotonum;
              lotoarr.push(obj);
              return lotoarr;
            },[]);
            return numarr;
         }) (6,50,10,[]);
   
        console.log(resultobj);

        */


/*
      // use of reduce for numarr and arrow function
       let resultobj = ((arrleng,max,totalarr,numobj) => {
            let arrofarr = getArrOfRandomArr(arrleng,max,totalarr);
            let numarr = [];
            for (let i = 1; i < max ; i++) {
              let n = i;
              if (n < 10) { 
                n = "0" + n;
              }else {
                n = String(n);
              }
              numarr.push(n);
            }
            console.log(arrofarr);
            //set p of each number appearing and mean of count in totalarr
            let p = 0, mean = 0;
            if (arrleng === 5) {
              p = 1/39 + 1/38 + 1/37 + 1/36 + 1/35;
            }else {
              p = 1/49 + 1/48 + 1/47 + 1/46 + 1/45 + 1/44;
            }
            mean = Math.floor(totalarr * p);

            numobj = numarr.reduce((obj,cn) => {
              let count = 0;
              let position = [];
              arrofarr.forEach((arr,index) => {
                arr.forEach((cx) => {
                   if (cx === cn) {
                    count += 1;
                    position.push(index + 1);
                  }
                })
              })
              let tempobj = {},
                  neardistance = position.length === 0 ? totalarr : totalarr - position[position.length - 1],
                  deviation = count - mean;
              tempobj["count"] = count;  
              tempobj['mean'] = mean;
              tempobj["deviation"] = deviation;
              tempobj["position"] = position; //position === [] -  cn does not appear during max period
              tempobj["neardist"] = neardistance;
              obj[cn] = tempobj;
              return obj;
            },{});
            return numobj;
         }) (6,50,10,{});
   
        console.log(resultobj);
        */
      /*
      // use of forEach for numarr and ES5 function
      var resultobj = (function (arrleng,max,totalarr,numobj) {
            var arrofarr = getArrOfRandomArr(arrleng,max,totalarr);
            var numarr = [];
            for (var i = 1; i < max ; i++) {
              var n = i;
              if (n < 10) { 
                n = "0" + n; 
              }else {
                n = String(n);
              }
              numarr.push(n);
            }
            console.log(arrofarr);
            numarr.forEach(function(cn) {
              var count = 0;
              var position = [];
              arrofarr.forEach(function(arr,index) {
                arr.forEach(function(cx) {
                  if (cx === cn) {
                    count += 1;
                    position.push(index + 1)
                  }
                })
              })
              var tempobj = {};
              tempobj["count"] = count;       //if count === 0
              tempobj["position"] = position; //position === [] - cn does not appear during max period
              numobj[cn] = tempobj;
           })
           return numobj;
      }) (5,40,100,{});

      console.log(resultobj);
      */

/*
    var arrofarr = getArrOfRandomArr(6,50,10);
    var numarr = [];
    var n = '';
    for (var i = 1; i < 50 ; i++) {
      if (i < 10) { 
        n = "0" + i 
      }else {
        n = String(i)
      }
      numarr.push(n);
    }
    var numobj = {};
    numarr.forEach(function(cn) {
      var count = 0;
      var position = [];
      arrofarr.forEach(function(arr,index) { 
        //var count = 0;
        arr.forEach(function(cx) {
          if (cx === cn) {
            count += 1; 
            position.push(index+1);
          }
        })
        //ttlcount += count;
      })
      var tempobj = {}
      tempobj["count"] = count;
      tempobj["position"] = position; //if position == [] - not appear during max period
      numobj[cn] = tempobj;
    })
console.log(arrofarr);
console.log(numobj);
*/

/* 
    function getRandomArr(arrlength,max) {

      var randomArr = [];

      while(randomArr.length !== arrlength) {

        var n = Math.floor(Math.random()*max);

        if (n > 0) {

          if (n < 10) {
            n = "0" + n;
          } else {
            n = String(n);
          }

          if (randomArr.indexOf(n) == -1) {
            randomArr.push(n);
          }
        }
      }
      randomArr.sort(function(a,b) { return a - b })
      return randomArr;
    }

   var arr =  getRandomArr(6,50);
   alert(arr);
   */

/*   
   function k_combinations(set, k) { 

    if (k > set.length || k <= 0) {
      return [];
    }
    
    if (k == set.length) {
      return [set];
    }
    
    if (k == 1) {
      let temp = [];
      set.forEach(function(line) {
         temp.push([line]);    
       })
      return temp;
    }
   
    var combs = [];
    set.forEach(function(line,index) {
      var head = set.slice(index, index + 1);
      var tailcombs = k_combinations(set.slice(index + 1), k - 1);
          tailcombs.forEach(function(line){
              combs.push(head.concat(line));  
          })
     })  
     return combs;
    }

    function sortAndUnique(arr) {
      arr = arr.sort((a,b)=> a-b);
      let newarr = [];
      arr.forEach((line)=> {
        if (newarr.indexOf(line) === -1) {
          newarr.push(line);
        }
      })
 
      //simpler but confusing - closure created
      //let newarr = arr.filter((line, index) => {
      //     return arr.indexOf(line) == index;
      //    })
      return newarr;
    }

   function factorial(num) {
    return num == 1 ? 1: num * factorial(num - 1)
   }

  var n = 7;
  var r = 6;
  var nr = n-r;
  var nf = factorial(n);
  var rf = factorial(r);
  var nrf = factorial(nr);
  var total = nf/(rf*nrf)    //  n!/r!*(n-r)!
  var arr = [7,6,5,1,2,3,2,3,4];
  arr = sortAndUnique(arr)
  var x = k_combinations(arr,6);
  console.log("total:",total);
  console.log(x);
  */


/*   
    var imgUrl1 = "https://apod.nasa.gov/apod/image/1807/bracewellradiosundial.jpg";
    var imgUrl2 = "https://apod.nasa.gov/apod/image/1807/M57Ring_HubbleGendler_3000.jpg";
    var imgUrl3 = "https://apod.nasa.gov/apod/image/1807/QuasarJetDrawing_DESY_3508.jpg";
    var imgUrl4 = "https://apod.nasa.gov/apod/image/1807/VenusMoonNeedles_Young_2400.jpg";
    var imgUrl5 = "https://apod.nasa.gov/apod/image/1807/MarsSlopeStreaks_MRO_3199.jpg";
    var imgUrl6 = "https://apod.nasa.gov/apod/image/1807/CerealiaFaculaPIA21924.jpg";
    var imgUrl7 = "https://apod.nasa.gov/apod/image/1807/KettlePoint.jpg"; 
    var imgArr = [imgUrl1,imgUrl2,imgUrl3,imgUrl4,imgUrl5,imgUrl6,imgUrl7]
    var n = Math.floor(Math.random()*imgArr.length+1);
    console.log(n)

    if (n > 0) { n = n - 1}
    console.log(n)
    var img = imgArr[n];
    var bkgimg = "url(" + img  + ")"
        //render ImgUrl
          $('<div>').attr({id:"hero-image"}).css({width:"100%",height:"500px","background-image": bkgimg})
         // .append($('<img>').attr({src: imgUrl}).css({width:"100%",height:"100%"}))
          //.append($('<h1>').attr({id:"hero-title"}).text("Star War"))
          .appendTo('body');  
          */

/*
    Function.prototype.bind = function() {
       var fn = this, args = Array.prototype.slice.call(arguments,0),
       object = args.shift();
       alert(fn);
       alert(args);
       return function(){
         return fn.apply(object,args.concat(Array.prototype.slice.call(arguments,0)));
       };

    };
    var myObject = {};

    function myFunction() {
    var total = 0;
    for (var i = 0; i < arguments.length; i++) {
      total += arguments[i]
    }
    console.log('length',arguments.length)
    console.log('1',arguments[0])
    console.log('2',arguments[1])
    console.log('3',arguments[2])
    console.log('4',arguments[3])
    console.log('5',arguments[4])
     this['total'] = total;
     return this.total;
    }

    var afunction = myFunction.bind(myObject,1,2,3,4,5);
    console.log(afunction);
    var x = afunction(6,7)
    console.log(x)
    console.log(myObject)
    */

/*
    function addMethod(object, name, fn) {

     var old = object[name];

     object[name] = function() {

       if (fn.length == arguments.length) {
           return fn.apply(this, arguments)
       }
       else if (typeof old == 'function') {
          return old.apply(this, arguments);
       }

     };

    }

    var ninjas = {
     values: ["Dean Edwards", "Sam Stephenson", "Alex Russell"]
     };

     addMethod(ninjas, "find", function(){
     return this.values;
     });

     addMethod(ninjas, "find", function(name){
       var ret = [];
       for (var i = 0; i < this.values.length; i++)
       if (this.values[i].indexOf(name) == 0)
       ret.push(this.values[i]);
       return ret;
     });

     addMethod(ninjas, "find", function(first, last){
       var ret = [];
       for (var i = 0; i < this.values.length; i++)
       if (this.values[i] == (first + " " + last))
       ret.push(this.values[i]);
       return ret;
     });

     console.log("0 arg: ",ninjas.find())
     console.log("1 arg: ",ninjas.find('Sam'))
     console.log("2 arg: ",ninjas.find('Dean','Edwards'))
     console.log(ninjas)
     */

 /*   
      function makeTree(arr,parent){
       var out = [];
       arr.filter(function(line) {return line.parent == parent})
          .forEach(function(line){
             var children = makeTree(arr,line.id)
             if (children.length) {
               line.children = children;
             }
             out.push(line)
          })
        return out;
      }

  var arr = [
        {id: 1,  parent: 0},
        {id: 2,  parent: 1},
        {id: 3,  parent: 1}  
        {id: 4,  parent: 2},
        {id: 5,  parent: 2},
        {id: 6,  parent: 3},     
        {id: 7,  parent: 3} 
      ];

  var output = makeTree(arr,0);
  console.log(output);
  */

/*
  function binarySearch (list, value) {
    // initial values for start, middle and end
    let start = 0
    let stop = list.length - 1
    let middle = Math.floor((start + stop) / 2)

    // While the middle is not what we're looking for and the list does not have a single item
    while (list[middle] !== value && start < stop) {
      if (value < list[middle]) {
        stop = middle - 1
      } else {
        start = middle + 1
      }

      // recalculate middle on every iteration
      middle = Math.floor((start + stop) / 2)
    }

    // if the current middle item is what we're looking for return it's index, else return -1
    return (list[middle] !== value) ? -1 : middle
  }

  const list = [2, 5, 8, 9, 13, 45, 67, 99]
  console.log(binarySearch(list, 99)) // 7 -> returns the index of the item
  */
  
/*
  function mergeSort(arr){
   var len = arr.length;
   if(len <2)
      return arr;
   var mid = Math.floor(len/2),
       left = arr.slice(0,mid),
       right =arr.slice(mid);
   //send left and right to the mergeSort to broke it down into pieces
   //then merge those
   return merge(mergeSort(left),mergeSort(right));
  }

  function merge(left, right){
  var result = [],
      lLen = left.length,
      rLen = right.length,
      l = 0,
      r = 0;
  while(l < lLen && r < rLen){
     if(left[l] < right[r]){
       result.push(left[l++]);
     }
     else{
       result.push(right[r++]);
    }
  }  
  //remaining part needs to be addred to the result
  return result.concat(left.slice(l)).concat(right.slice(r));
 }

 var arr = [5,7,3,8,10,2,6,1,4,9];
     arr = mergeSort(arr);
 console.log(arr);
 */


/*
    const amtWithComma = (x) => {
      return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    console.log(amtWithComma(67890.45))
    */


/*
   function printAmount(amount) {
    var prefix,suffix,
     obj = {
    1: "One",
    2: "Two",
    3: "Three",
    4: "Four",
    5: "Five",
    6: "Six",
    7: "Seven",
    8: "Eight",
    9: "Nine",
    10: "Ten"
  };

   if (amount >= 1000) {
      prefix = obj[Math.floor(amount/1000)].trim()
      amount = amount%1000;
      suffix = "thousand"
   }else if(amount >= 100) {
      prefix = obj[Math.floor(amount/100)].trim()
      amount = amount%100;
     suffix = "Hundred"
   }else {return ""}

   return prefix + " " + suffix +" " + printAmount(amount)
 }

console.log(printAmount(9500))

*/

/*
    function reverse(str) {
      return str.length == 1 ? str : str.substr(str.length -1) + reverse(str.substr(0,str.length - 1));
    }
    console.log(reverse("abcdefghijklmnopqrstuvwxyz"))
    */
/*    
    //geolocation
    var gps = navigator.geolocation.getCurrentPosition(
     function (position) {
      for (key in position.coords) {
      document.write(key + ": "+ position.coords[key]);
      document.write ("<br>");
      }
     });

    //latitude: 22.6338169
    //longitude: 120.294066
    */

/*    
    var w = 900,
        h = 400;

    var circleWidth = 5;

    var fontFamily = 'Bree Serif',
        fontSizeHighlight = '1.5em',
        fontSizeNormal = '1em';

    var palette = {
          "lightgray": "#819090",
          "gray": "#708284",
          "mediumgray": "#536870",
          "darkgray": "#475B62",
          "darkblue": "#0A2933",
          "darkerblue": "#042029",
          "paleryellow": "#FCF4DC",
          "paleyellow": "#EAE3CB",
          "yellow": "#A57706",
          "orange": "#BD3613",
          "red": "#D11C24",
          "pink": "#C61C6F",
          "purple": "#595AB7",
          "blue": "#2176C7",
          "green": "#259286",
          "yellowgreen": "#738A05"
      }

    var nodes = [
      {"name": "Matteo" },
      {"name": "Daniele"},
      {"name": "Marco"},
      {"name": "Lucio"},
      {"name": "Davide" }
      ]

    var links = [
      {source: nodes[0], target: nodes[1]},
      {source: nodes[1], target: nodes[2]},
      {source: nodes[0], target: nodes[3]},
      {source: nodes[4], target: nodes[2]},
      {source: nodes[2], target: nodes[3]}
      ]

    var vis = d3.select("body")
        .append("svg:svg")
        .attr("class", "stage")
        .attr("width", w)
        .attr("height", h);

    var force = d3.layout.force()
        .nodes(nodes)
        .links([])
        .gravity(0.1)
        .charge(-1000)
        .size([w, h]);

     var link = vis.selectAll(".link")
            .data(links)
            .enter().append("line")
            .attr("class", "link")
            .attr("stroke", "#CCC")
            .attr("fill", "none");

     var node = vis.selectAll("circle.node")
          .data(nodes)
          .enter().append("g")
          .attr("class", "node")

          //MOUSEOVER
          .on("mouseover", function(d,i) {
            if (i>0) {
              //CIRCLE
              d3.select(this).selectAll("circle")
              .transition()
              .duration(250)
              .style("cursor", "none")     
              .attr("r", circleWidth+3)
              .attr("fill",palette.orange);

              //TEXT
              d3.select(this).select("text")
              .transition()
              .style("cursor", "none")     
              .duration(250)
              .style("cursor", "none")     
              .attr("font-size","1.5em")
              .attr("x", 15 )
              .attr("y", 5 )
            } else {
              //CIRCLE
              d3.select(this).selectAll("circle")
              .style("cursor", "none")     
              //TEXT
              d3.select(this).select("text")
              .style("cursor", "none")     
            }
          })

          //MOUSEOUT
          .on("mouseout", function(d,i) {
            if (i>0) {
              //CIRCLE
              d3.select(this).selectAll("circle")
              .transition()
              .duration(250)
              .attr("r", circleWidth)
              .attr("fill",palette.pink);

              //TEXT
              d3.select(this).select("text")
              .transition()
              .duration(250)
              .attr("font-size","1em")
              .attr("x", 8 )
              .attr("y", 4 )
            }
          })

          .call(force.drag);


        //CIRCLE
        node.append("svg:circle")
          .attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; })
          .attr("r", circleWidth)
          .attr("fill", function(d, i) { if (i>0) { return  palette.pink; } else { return palette.paleryellow } } )

        //TEXT
        node.append("text")
          .text(function(d, i) { return d.name; })
          .attr("x",    function(d, i) { return circleWidth + 5; })
          .attr("y",            function(d, i) { if (i>0) { return circleWidth + 0 }    else { return 8 } })
          .attr("font-family",  "Bree Serif")
          .attr("fill",         function(d, i) {  return  palette.paleryellow;  })
          .attr("font-size",    function(d, i) {  return  "1em"; })
          .attr("text-anchor",  function(d, i) { if (i>0) { return  "beginning"; }      else { return "end" } })



    force.on("tick", function(e) {
      node.attr("transform", function(d, i) {     
            return "translate(" + d.x + "," + d.y + ")"; 
        });
        
       link.attr("x1", function(d)   { return d.source.x; })
           .attr("y1", function(d)   { return d.source.y; })
           .attr("x2", function(d)   { return d.target.x; })
           .attr("y2", function(d)   { return d.target.y; })
    });

    force.start();
        
    */


/* 
    //num and string pass by value, obj and array by reference
      function newClosure(someNum, someRef) {
        // Local variables that end up within closure
        var num = someNum;
        var anArray = someRef
        
        return function(x) {
            num += x;
            anArray.push(num);
            console.log("num: ",num)
            console.log("anArray: ",anArray)
          }
    }

    var arr = [1,2,3];
    //fn1 = newClosure(4, arr);
    //fn2 = newClosure(5, obj);
    //fn1(1); // num: 5; anArray: 1,2,3,5; ref.someVar: 4;

    fn2 = newClosure(11, arr);
    fn2(1);
    console.log("arr: ",arr)
    arr.push(100)
    fn2(8);
    */




/*
   function k_combinations(set, k) {
    var i, j, combs, head, tailcombs;
    
    // There is no way to take e.g. sets of 5 elements from
    // a set of 4.
    if (k > set.length || k <= 0) {
      return [];
    }
    
    // K-sized set has only one K-sized subset.
    if (k == set.length) {
      return [set];
    }
    
    // There is N 1-sized subsets in a N-sized set.
    if (k == 1) {
      combs = [];
      for (i = 0; i < set.length; i++) {
        combs.push([set[i]]);
      }
      return combs;
    }
    
    // Assert {1 < k < set.length}
    
    // Algorithm description:
    // To get k-combinations of a set, we want to join each element
    // with all (k-1)-combinations of the other elements. The set of
    // these k-sized sets would be the desired result. However, as we
    // represent sets with lists, we need to take duplicates into
    // account. To avoid producing duplicates and also unnecessary
    // computing, we use the following approach: each element i
    // divides the list into three: the preceding elements, the
    // current element i, and the subsequent elements. For the first
    // element, the list of preceding elements is empty. For element i,
    // we compute the (k-1)-computations of the subsequent elements,
    // join each with the element i, and store the joined to the set of
    // computed k-combinations. We do not need to take the preceding
    // elements into account, because they have already been the i:th
    // element so they are already computed and stored. When the length
    // of the subsequent list drops below (k-1), we cannot find any
    // (k-1)-combs, hence the upper limit for the iteration:

    combs = [];
    for (i = 0; i < set.length - k + 1; i++) {
      // head is a list that includes only our current element.
      head = set.slice(i, i + 1);
      // We take smaller combinations from the subsequent elements
      tailcombs = k_combinations(set.slice(i + 1), k - 1);
      // For each (k-1)-combination we join it with the current
      // and store it to the set of k-combinations.
      for (j = 0; j < tailcombs.length; j++) {
        combs.push(head.concat(tailcombs[j]));
      }
    }
    return combs;
  }

  var x = k_combinations([1,2,3], 2)
  console.log(x)
  */


</script>
    <!--script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js" integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T" crossorigin="anonymous"></script--->
    <!---script src="/js/d3.v3.min.js"></script>
    <script src="/js/jquery.js"></script>
    <script src="/js/test2.js"></script--->
    </body>
    </html>